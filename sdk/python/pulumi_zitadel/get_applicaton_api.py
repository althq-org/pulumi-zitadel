# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetApplicatonApiResult',
    'AwaitableGetApplicatonApiResult',
    'get_applicaton_api',
    'get_applicaton_api_output',
]

@pulumi.output_type
class GetApplicatonApiResult:
    """
    A collection of values returned by getApplicatonApi.
    """
    def __init__(__self__, app_id=None, auth_method_type=None, id=None, name=None, org_id=None, project_id=None):
        if app_id and not isinstance(app_id, str):
            raise TypeError("Expected argument 'app_id' to be a str")
        pulumi.set(__self__, "app_id", app_id)
        if auth_method_type and not isinstance(auth_method_type, str):
            raise TypeError("Expected argument 'auth_method_type' to be a str")
        pulumi.set(__self__, "auth_method_type", auth_method_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="authMethodType")
    def auth_method_type(self) -> str:
        """
        Auth method type
        """
        return pulumi.get(self, "auth_method_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the application
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        """
        orgID of the application
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        ID of the project
        """
        return pulumi.get(self, "project_id")


class AwaitableGetApplicatonApiResult(GetApplicatonApiResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApplicatonApiResult(
            app_id=self.app_id,
            auth_method_type=self.auth_method_type,
            id=self.id,
            name=self.name,
            org_id=self.org_id,
            project_id=self.project_id)


def get_applicaton_api(app_id: Optional[str] = None,
                       org_id: Optional[str] = None,
                       project_id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApplicatonApiResult:
    """
    Datasource representing an API application belonging to a project, with all configuration possibilities.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_zitadel as zitadel

    api_application_applicaton_api = zitadel.get_applicaton_api(org_id=data["zitadel_org"]["org"]["id"],
        project_id=data["zitadel_project"]["project"]["id"],
        app_id="177073625566806019")
    pulumi.export("apiApplication", api_application_applicaton_api)
    ```


    :param str app_id: The ID of this resource.
    :param str org_id: orgID of the application
    :param str project_id: ID of the project
    """
    __args__ = dict()
    __args__['appId'] = app_id
    __args__['orgId'] = org_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zitadel:index/getApplicatonApi:getApplicatonApi', __args__, opts=opts, typ=GetApplicatonApiResult).value

    return AwaitableGetApplicatonApiResult(
        app_id=__ret__.app_id,
        auth_method_type=__ret__.auth_method_type,
        id=__ret__.id,
        name=__ret__.name,
        org_id=__ret__.org_id,
        project_id=__ret__.project_id)


@_utilities.lift_output_func(get_applicaton_api)
def get_applicaton_api_output(app_id: Optional[pulumi.Input[str]] = None,
                              org_id: Optional[pulumi.Input[str]] = None,
                              project_id: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetApplicatonApiResult]:
    """
    Datasource representing an API application belonging to a project, with all configuration possibilities.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_zitadel as zitadel

    api_application_applicaton_api = zitadel.get_applicaton_api(org_id=data["zitadel_org"]["org"]["id"],
        project_id=data["zitadel_project"]["project"]["id"],
        app_id="177073625566806019")
    pulumi.export("apiApplication", api_application_applicaton_api)
    ```


    :param str app_id: The ID of this resource.
    :param str org_id: orgID of the application
    :param str project_id: ID of the project
    """
    ...
