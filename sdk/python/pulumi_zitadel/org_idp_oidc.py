# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['OrgIdpOidcArgs', 'OrgIdpOidc']

@pulumi.input_type
class OrgIdpOidcArgs:
    def __init__(__self__, *,
                 auto_register: pulumi.Input[bool],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 display_name_mapping: pulumi.Input[str],
                 issuer: pulumi.Input[str],
                 org_id: pulumi.Input[str],
                 scopes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 styling_type: pulumi.Input[str],
                 username_mapping: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OrgIdpOidc resource.
        :param pulumi.Input[bool] auto_register: auto register for users from this idp
        :param pulumi.Input[str] client_id: client id generated by the identity provider
        :param pulumi.Input[str] client_secret: client secret generated by the identity provider
        :param pulumi.Input[str] display_name_mapping: definition which field is mapped to the display name of the user
        :param pulumi.Input[str] issuer: the oidc issuer of the identity provider
        :param pulumi.Input[str] org_id: ID of the organization
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: the scopes requested by ZITADEL during the request on the identity provider
        :param pulumi.Input[str] styling_type: Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE
        :param pulumi.Input[str] username_mapping: definition which field is mapped to the email of the user
        :param pulumi.Input[str] name: Name of the IDP
        """
        pulumi.set(__self__, "auto_register", auto_register)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "display_name_mapping", display_name_mapping)
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "styling_type", styling_type)
        pulumi.set(__self__, "username_mapping", username_mapping)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="autoRegister")
    def auto_register(self) -> pulumi.Input[bool]:
        """
        auto register for users from this idp
        """
        return pulumi.get(self, "auto_register")

    @auto_register.setter
    def auto_register(self, value: pulumi.Input[bool]):
        pulumi.set(self, "auto_register", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        client id generated by the identity provider
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        client secret generated by the identity provider
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="displayNameMapping")
    def display_name_mapping(self) -> pulumi.Input[str]:
        """
        definition which field is mapped to the display name of the user
        """
        return pulumi.get(self, "display_name_mapping")

    @display_name_mapping.setter
    def display_name_mapping(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name_mapping", value)

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Input[str]:
        """
        the oidc issuer of the identity provider
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: pulumi.Input[str]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[str]:
        """
        ID of the organization
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def scopes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        the scopes requested by ZITADEL during the request on the identity provider
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="stylingType")
    def styling_type(self) -> pulumi.Input[str]:
        """
        Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE
        """
        return pulumi.get(self, "styling_type")

    @styling_type.setter
    def styling_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "styling_type", value)

    @property
    @pulumi.getter(name="usernameMapping")
    def username_mapping(self) -> pulumi.Input[str]:
        """
        definition which field is mapped to the email of the user
        """
        return pulumi.get(self, "username_mapping")

    @username_mapping.setter
    def username_mapping(self, value: pulumi.Input[str]):
        pulumi.set(self, "username_mapping", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the IDP
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _OrgIdpOidcState:
    def __init__(__self__, *,
                 auto_register: Optional[pulumi.Input[bool]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 display_name_mapping: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 styling_type: Optional[pulumi.Input[str]] = None,
                 username_mapping: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OrgIdpOidc resources.
        :param pulumi.Input[bool] auto_register: auto register for users from this idp
        :param pulumi.Input[str] client_id: client id generated by the identity provider
        :param pulumi.Input[str] client_secret: client secret generated by the identity provider
        :param pulumi.Input[str] display_name_mapping: definition which field is mapped to the display name of the user
        :param pulumi.Input[str] issuer: the oidc issuer of the identity provider
        :param pulumi.Input[str] name: Name of the IDP
        :param pulumi.Input[str] org_id: ID of the organization
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: the scopes requested by ZITADEL during the request on the identity provider
        :param pulumi.Input[str] styling_type: Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE
        :param pulumi.Input[str] username_mapping: definition which field is mapped to the email of the user
        """
        if auto_register is not None:
            pulumi.set(__self__, "auto_register", auto_register)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if display_name_mapping is not None:
            pulumi.set(__self__, "display_name_mapping", display_name_mapping)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if styling_type is not None:
            pulumi.set(__self__, "styling_type", styling_type)
        if username_mapping is not None:
            pulumi.set(__self__, "username_mapping", username_mapping)

    @property
    @pulumi.getter(name="autoRegister")
    def auto_register(self) -> Optional[pulumi.Input[bool]]:
        """
        auto register for users from this idp
        """
        return pulumi.get(self, "auto_register")

    @auto_register.setter
    def auto_register(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_register", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        client id generated by the identity provider
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        client secret generated by the identity provider
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="displayNameMapping")
    def display_name_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        definition which field is mapped to the display name of the user
        """
        return pulumi.get(self, "display_name_mapping")

    @display_name_mapping.setter
    def display_name_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name_mapping", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        the oidc issuer of the identity provider
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the IDP
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the organization
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        the scopes requested by ZITADEL during the request on the identity provider
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="stylingType")
    def styling_type(self) -> Optional[pulumi.Input[str]]:
        """
        Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE
        """
        return pulumi.get(self, "styling_type")

    @styling_type.setter
    def styling_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "styling_type", value)

    @property
    @pulumi.getter(name="usernameMapping")
    def username_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        definition which field is mapped to the email of the user
        """
        return pulumi.get(self, "username_mapping")

    @username_mapping.setter
    def username_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_mapping", value)


class OrgIdpOidc(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_register: Optional[pulumi.Input[bool]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 display_name_mapping: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 styling_type: Optional[pulumi.Input[str]] = None,
                 username_mapping: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Resource representing a generic OIDC IdP on the organization.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_zitadel as zitadel

        oidc_idp = zitadel.OrgIdpOidc("oidcIdp",
            org_id=zitadel_org["org"]["id"],
            styling_type="STYLING_TYPE_UNSPECIFIED",
            client_id="google",
            client_secret="google_secret",
            issuer="https://google.com",
            scopes=[
                "openid",
                "profile",
                "email",
            ],
            display_name_mapping="OIDC_MAPPING_FIELD_PREFERRED_USERNAME",
            username_mapping="OIDC_MAPPING_FIELD_PREFERRED_USERNAME",
            auto_register=False)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_register: auto register for users from this idp
        :param pulumi.Input[str] client_id: client id generated by the identity provider
        :param pulumi.Input[str] client_secret: client secret generated by the identity provider
        :param pulumi.Input[str] display_name_mapping: definition which field is mapped to the display name of the user
        :param pulumi.Input[str] issuer: the oidc issuer of the identity provider
        :param pulumi.Input[str] name: Name of the IDP
        :param pulumi.Input[str] org_id: ID of the organization
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: the scopes requested by ZITADEL during the request on the identity provider
        :param pulumi.Input[str] styling_type: Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE
        :param pulumi.Input[str] username_mapping: definition which field is mapped to the email of the user
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgIdpOidcArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource representing a generic OIDC IdP on the organization.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_zitadel as zitadel

        oidc_idp = zitadel.OrgIdpOidc("oidcIdp",
            org_id=zitadel_org["org"]["id"],
            styling_type="STYLING_TYPE_UNSPECIFIED",
            client_id="google",
            client_secret="google_secret",
            issuer="https://google.com",
            scopes=[
                "openid",
                "profile",
                "email",
            ],
            display_name_mapping="OIDC_MAPPING_FIELD_PREFERRED_USERNAME",
            username_mapping="OIDC_MAPPING_FIELD_PREFERRED_USERNAME",
            auto_register=False)
        ```

        :param str resource_name: The name of the resource.
        :param OrgIdpOidcArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgIdpOidcArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_register: Optional[pulumi.Input[bool]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 display_name_mapping: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 styling_type: Optional[pulumi.Input[str]] = None,
                 username_mapping: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgIdpOidcArgs.__new__(OrgIdpOidcArgs)

            if auto_register is None and not opts.urn:
                raise TypeError("Missing required property 'auto_register'")
            __props__.__dict__["auto_register"] = auto_register
            if client_id is None and not opts.urn:
                raise TypeError("Missing required property 'client_id'")
            __props__.__dict__["client_id"] = None if client_id is None else pulumi.Output.secret(client_id)
            if client_secret is None and not opts.urn:
                raise TypeError("Missing required property 'client_secret'")
            __props__.__dict__["client_secret"] = None if client_secret is None else pulumi.Output.secret(client_secret)
            if display_name_mapping is None and not opts.urn:
                raise TypeError("Missing required property 'display_name_mapping'")
            __props__.__dict__["display_name_mapping"] = display_name_mapping
            if issuer is None and not opts.urn:
                raise TypeError("Missing required property 'issuer'")
            __props__.__dict__["issuer"] = issuer
            __props__.__dict__["name"] = name
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
            if scopes is None and not opts.urn:
                raise TypeError("Missing required property 'scopes'")
            __props__.__dict__["scopes"] = scopes
            if styling_type is None and not opts.urn:
                raise TypeError("Missing required property 'styling_type'")
            __props__.__dict__["styling_type"] = styling_type
            if username_mapping is None and not opts.urn:
                raise TypeError("Missing required property 'username_mapping'")
            __props__.__dict__["username_mapping"] = username_mapping
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["clientId", "clientSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(OrgIdpOidc, __self__).__init__(
            'zitadel:index/orgIdpOidc:OrgIdpOidc',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_register: Optional[pulumi.Input[bool]] = None,
            client_id: Optional[pulumi.Input[str]] = None,
            client_secret: Optional[pulumi.Input[str]] = None,
            display_name_mapping: Optional[pulumi.Input[str]] = None,
            issuer: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            styling_type: Optional[pulumi.Input[str]] = None,
            username_mapping: Optional[pulumi.Input[str]] = None) -> 'OrgIdpOidc':
        """
        Get an existing OrgIdpOidc resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_register: auto register for users from this idp
        :param pulumi.Input[str] client_id: client id generated by the identity provider
        :param pulumi.Input[str] client_secret: client secret generated by the identity provider
        :param pulumi.Input[str] display_name_mapping: definition which field is mapped to the display name of the user
        :param pulumi.Input[str] issuer: the oidc issuer of the identity provider
        :param pulumi.Input[str] name: Name of the IDP
        :param pulumi.Input[str] org_id: ID of the organization
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: the scopes requested by ZITADEL during the request on the identity provider
        :param pulumi.Input[str] styling_type: Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE
        :param pulumi.Input[str] username_mapping: definition which field is mapped to the email of the user
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgIdpOidcState.__new__(_OrgIdpOidcState)

        __props__.__dict__["auto_register"] = auto_register
        __props__.__dict__["client_id"] = client_id
        __props__.__dict__["client_secret"] = client_secret
        __props__.__dict__["display_name_mapping"] = display_name_mapping
        __props__.__dict__["issuer"] = issuer
        __props__.__dict__["name"] = name
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["scopes"] = scopes
        __props__.__dict__["styling_type"] = styling_type
        __props__.__dict__["username_mapping"] = username_mapping
        return OrgIdpOidc(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRegister")
    def auto_register(self) -> pulumi.Output[bool]:
        """
        auto register for users from this idp
        """
        return pulumi.get(self, "auto_register")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[str]:
        """
        client id generated by the identity provider
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Output[str]:
        """
        client secret generated by the identity provider
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="displayNameMapping")
    def display_name_mapping(self) -> pulumi.Output[str]:
        """
        definition which field is mapped to the display name of the user
        """
        return pulumi.get(self, "display_name_mapping")

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Output[str]:
        """
        the oidc issuer of the identity provider
        """
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the IDP
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        """
        ID of the organization
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def scopes(self) -> pulumi.Output[Sequence[str]]:
        """
        the scopes requested by ZITADEL during the request on the identity provider
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="stylingType")
    def styling_type(self) -> pulumi.Output[str]:
        """
        Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE
        """
        return pulumi.get(self, "styling_type")

    @property
    @pulumi.getter(name="usernameMapping")
    def username_mapping(self) -> pulumi.Output[str]:
        """
        definition which field is mapped to the email of the user
        """
        return pulumi.get(self, "username_mapping")

