// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Zitadel
{
    /// <summary>
    /// Resource representing a generic OIDC IdP on the organization.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Zitadel = Pulumi.Zitadel;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var oidcIdp = new Zitadel.OrgIdpOidc("oidcIdp", new()
    ///     {
    ///         OrgId = zitadel_org.Org.Id,
    ///         StylingType = "STYLING_TYPE_UNSPECIFIED",
    ///         ClientId = "google",
    ///         ClientSecret = "google_secret",
    ///         Issuer = "https://google.com",
    ///         Scopes = new[]
    ///         {
    ///             "openid",
    ///             "profile",
    ///             "email",
    ///         },
    ///         DisplayNameMapping = "OIDC_MAPPING_FIELD_PREFERRED_USERNAME",
    ///         UsernameMapping = "OIDC_MAPPING_FIELD_PREFERRED_USERNAME",
    ///         AutoRegister = false,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [ZitadelResourceType("zitadel:index/orgIdpOidc:OrgIdpOidc")]
    public partial class OrgIdpOidc : global::Pulumi.CustomResource
    {
        /// <summary>
        /// auto register for users from this idp
        /// </summary>
        [Output("autoRegister")]
        public Output<bool> AutoRegister { get; private set; } = null!;

        /// <summary>
        /// client id generated by the identity provider
        /// </summary>
        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        /// <summary>
        /// client secret generated by the identity provider
        /// </summary>
        [Output("clientSecret")]
        public Output<string> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// definition which field is mapped to the display name of the user
        /// </summary>
        [Output("displayNameMapping")]
        public Output<string> DisplayNameMapping { get; private set; } = null!;

        /// <summary>
        /// the oidc issuer of the identity provider
        /// </summary>
        [Output("issuer")]
        public Output<string> Issuer { get; private set; } = null!;

        /// <summary>
        /// Name of the IDP
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID of the organization
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// the scopes requested by ZITADEL during the request on the identity provider
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        /// <summary>
        /// Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE
        /// </summary>
        [Output("stylingType")]
        public Output<string> StylingType { get; private set; } = null!;

        /// <summary>
        /// definition which field is mapped to the email of the user
        /// </summary>
        [Output("usernameMapping")]
        public Output<string> UsernameMapping { get; private set; } = null!;


        /// <summary>
        /// Create a OrgIdpOidc resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrgIdpOidc(string name, OrgIdpOidcArgs args, CustomResourceOptions? options = null)
            : base("zitadel:index/orgIdpOidc:OrgIdpOidc", name, args ?? new OrgIdpOidcArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrgIdpOidc(string name, Input<string> id, OrgIdpOidcState? state = null, CustomResourceOptions? options = null)
            : base("zitadel:index/orgIdpOidc:OrgIdpOidc", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "clientId",
                    "clientSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrgIdpOidc resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrgIdpOidc Get(string name, Input<string> id, OrgIdpOidcState? state = null, CustomResourceOptions? options = null)
        {
            return new OrgIdpOidc(name, id, state, options);
        }
    }

    public sealed class OrgIdpOidcArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// auto register for users from this idp
        /// </summary>
        [Input("autoRegister", required: true)]
        public Input<bool> AutoRegister { get; set; } = null!;

        [Input("clientId", required: true)]
        private Input<string>? _clientId;

        /// <summary>
        /// client id generated by the identity provider
        /// </summary>
        public Input<string>? ClientId
        {
            get => _clientId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientSecret", required: true)]
        private Input<string>? _clientSecret;

        /// <summary>
        /// client secret generated by the identity provider
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// definition which field is mapped to the display name of the user
        /// </summary>
        [Input("displayNameMapping", required: true)]
        public Input<string> DisplayNameMapping { get; set; } = null!;

        /// <summary>
        /// the oidc issuer of the identity provider
        /// </summary>
        [Input("issuer", required: true)]
        public Input<string> Issuer { get; set; } = null!;

        /// <summary>
        /// Name of the IDP
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the organization
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        [Input("scopes", required: true)]
        private InputList<string>? _scopes;

        /// <summary>
        /// the scopes requested by ZITADEL during the request on the identity provider
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE
        /// </summary>
        [Input("stylingType", required: true)]
        public Input<string> StylingType { get; set; } = null!;

        /// <summary>
        /// definition which field is mapped to the email of the user
        /// </summary>
        [Input("usernameMapping", required: true)]
        public Input<string> UsernameMapping { get; set; } = null!;

        public OrgIdpOidcArgs()
        {
        }
        public static new OrgIdpOidcArgs Empty => new OrgIdpOidcArgs();
    }

    public sealed class OrgIdpOidcState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// auto register for users from this idp
        /// </summary>
        [Input("autoRegister")]
        public Input<bool>? AutoRegister { get; set; }

        [Input("clientId")]
        private Input<string>? _clientId;

        /// <summary>
        /// client id generated by the identity provider
        /// </summary>
        public Input<string>? ClientId
        {
            get => _clientId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// client secret generated by the identity provider
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// definition which field is mapped to the display name of the user
        /// </summary>
        [Input("displayNameMapping")]
        public Input<string>? DisplayNameMapping { get; set; }

        /// <summary>
        /// the oidc issuer of the identity provider
        /// </summary>
        [Input("issuer")]
        public Input<string>? Issuer { get; set; }

        /// <summary>
        /// Name of the IDP
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the organization
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// the scopes requested by ZITADEL during the request on the identity provider
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE
        /// </summary>
        [Input("stylingType")]
        public Input<string>? StylingType { get; set; }

        /// <summary>
        /// definition which field is mapped to the email of the user
        /// </summary>
        [Input("usernameMapping")]
        public Input<string>? UsernameMapping { get; set; }

        public OrgIdpOidcState()
        {
        }
        public static new OrgIdpOidcState Empty => new OrgIdpOidcState();
    }
}
