// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Zitadel
{
    public static class GetApplicatoinOidc
    {
        /// <summary>
        /// Datasource representing an OIDC application belonging to a project, with all configuration possibilities.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zitadel = Pulumi.Zitadel;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var oidcApplicationApplicatoinOidc = Zitadel.GetApplicatoinOidc.Invoke(new()
        ///     {
        ///         OrgId = data.Zitadel_org.Org.Id,
        ///         ProjectId = data.Zitadel_project.Project.Id,
        ///         AppId = "177073626925760515",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["oidcApplication"] = oidcApplicationApplicatoinOidc,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetApplicatoinOidcResult> InvokeAsync(GetApplicatoinOidcArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApplicatoinOidcResult>("zitadel:index/getApplicatoinOidc:getApplicatoinOidc", args ?? new GetApplicatoinOidcArgs(), options.WithDefaults());

        /// <summary>
        /// Datasource representing an OIDC application belonging to a project, with all configuration possibilities.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zitadel = Pulumi.Zitadel;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var oidcApplicationApplicatoinOidc = Zitadel.GetApplicatoinOidc.Invoke(new()
        ///     {
        ///         OrgId = data.Zitadel_org.Org.Id,
        ///         ProjectId = data.Zitadel_project.Project.Id,
        ///         AppId = "177073626925760515",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["oidcApplication"] = oidcApplicationApplicatoinOidc,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetApplicatoinOidcResult> Invoke(GetApplicatoinOidcInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicatoinOidcResult>("zitadel:index/getApplicatoinOidc:getApplicatoinOidc", args ?? new GetApplicatoinOidcInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplicatoinOidcArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        [Input("appId", required: true)]
        public string AppId { get; set; } = null!;

        /// <summary>
        /// orgID of the application
        /// </summary>
        [Input("orgId", required: true)]
        public string OrgId { get; set; } = null!;

        /// <summary>
        /// ID of the project
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetApplicatoinOidcArgs()
        {
        }
        public static new GetApplicatoinOidcArgs Empty => new GetApplicatoinOidcArgs();
    }

    public sealed class GetApplicatoinOidcInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        [Input("appId", required: true)]
        public Input<string> AppId { get; set; } = null!;

        /// <summary>
        /// orgID of the application
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// ID of the project
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetApplicatoinOidcInvokeArgs()
        {
        }
        public static new GetApplicatoinOidcInvokeArgs Empty => new GetApplicatoinOidcInvokeArgs();
    }


    [OutputType]
    public sealed class GetApplicatoinOidcResult
    {
        /// <summary>
        /// Access token role assertion
        /// </summary>
        public readonly bool AccessTokenRoleAssertion;
        /// <summary>
        /// Access token type
        /// </summary>
        public readonly string AccessTokenType;
        /// <summary>
        /// Additional origins
        /// </summary>
        public readonly ImmutableArray<string> AdditionalOrigins;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string AppId;
        /// <summary>
        /// App type
        /// </summary>
        public readonly string AppType;
        /// <summary>
        /// Auth method type
        /// </summary>
        public readonly string AuthMethodType;
        /// <summary>
        /// Clockskew
        /// </summary>
        public readonly string ClockSkew;
        /// <summary>
        /// Dev mode
        /// </summary>
        public readonly bool DevMode;
        /// <summary>
        /// Grant types
        /// </summary>
        public readonly ImmutableArray<string> GrantTypes;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ID token role assertion
        /// </summary>
        public readonly bool IdTokenRoleAssertion;
        /// <summary>
        /// Token userinfo assertion
        /// </summary>
        public readonly bool IdTokenUserinfoAssertion;
        /// <summary>
        /// Name of the application
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// orgID of the application
        /// </summary>
        public readonly string OrgId;
        /// <summary>
        /// Post logout redirect URIs
        /// </summary>
        public readonly ImmutableArray<string> PostLogoutRedirectUris;
        /// <summary>
        /// ID of the project
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// RedirectURIs
        /// </summary>
        public readonly ImmutableArray<string> RedirectUris;
        /// <summary>
        /// Response type
        /// </summary>
        public readonly ImmutableArray<string> ResponseTypes;
        /// <summary>
        /// Version
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetApplicatoinOidcResult(
            bool accessTokenRoleAssertion,

            string accessTokenType,

            ImmutableArray<string> additionalOrigins,

            string appId,

            string appType,

            string authMethodType,

            string clockSkew,

            bool devMode,

            ImmutableArray<string> grantTypes,

            string id,

            bool idTokenRoleAssertion,

            bool idTokenUserinfoAssertion,

            string name,

            string orgId,

            ImmutableArray<string> postLogoutRedirectUris,

            string projectId,

            ImmutableArray<string> redirectUris,

            ImmutableArray<string> responseTypes,

            string version)
        {
            AccessTokenRoleAssertion = accessTokenRoleAssertion;
            AccessTokenType = accessTokenType;
            AdditionalOrigins = additionalOrigins;
            AppId = appId;
            AppType = appType;
            AuthMethodType = authMethodType;
            ClockSkew = clockSkew;
            DevMode = devMode;
            GrantTypes = grantTypes;
            Id = id;
            IdTokenRoleAssertion = idTokenRoleAssertion;
            IdTokenUserinfoAssertion = idTokenUserinfoAssertion;
            Name = name;
            OrgId = orgId;
            PostLogoutRedirectUris = postLogoutRedirectUris;
            ProjectId = projectId;
            RedirectUris = redirectUris;
            ResponseTypes = responseTypes;
            Version = version;
        }
    }
}
